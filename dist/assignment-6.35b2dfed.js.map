{"mappings":"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","sources":["<anon>","src/js/app.js"],"sourcesContent":["/**\n * WEB222 – Assignment 06\n *\n * I declare that this assignment is my own work in accordance with\n * Seneca Academic Policy. No part of this assignment has been\n * copied manually or electronically from any other source\n * (including web sites) or distributed to other students.\n *\n * Please update the following with your information:\n *\n *      Name:       Anderson Yu-Hong Cai\n *      Student ID: 109262246\n *      Date:       2025/4/2\n */ // All of our data is available on the global `window` object.\n// Create local variables to work with it in this file.\nconst { artists, songs } = window; // Destructuring Assignment\n// For debugging, display all of our data in the console. You can remove this later.\nconsole.log({\n    artists,\n    songs\n}, \"App Data\"); // leave here to check it can work correctly\nwindow.onload = function() {\n    if (!artists) {\n        console.error(\"No artists found!\");\n        return;\n    }\n    const menu = document.querySelector(\"#menu\");\n    const selectedArtist = document.querySelector(\"#selected-artist\");\n    const cardContainer = document.querySelector(\"#card-container\");\n    artists.forEach((artist)=>{\n        const button = document.createElement(\"button\");\n        let textNode = document.createTextNode(artist.name);\n        button.appendChild(textNode);\n        button.addEventListener(\"click\", ()=>showArtistInfo(artist));\n        menu.appendChild(button);\n    });\n    showArtistInfo(artists[0]); // default to the first one\n    // choose artist and show their details\n    function showArtistInfo(artist) {\n        // console.log(artist);\n        let artistInfoHTML = artist.name + \"(\";\n        let linkInfoHTML = artist.links.map((link)=>{\n            return `<a href=${link.url} target=\"_blank\">${link.displayName}</a>`;\n        }).join(\", \"); // map to return a list and join to combine them\n        artistInfoHTML += linkInfoHTML + \")\";\n        selectedArtist.innerHTML = artistInfoHTML;\n        // clean card container\n        cardContainer.innerHTML = \"\";\n        let filteredSongs = songs.filter((song)=>song.artistId === artist.artistId && !song.explicit);\n        if (filteredSongs.length === 0) {\n            cardContainer.innerHTML = `<p>No available songs</p>`;\n            return;\n        }\n        filteredSongs.forEach((song)=>{\n            cardContainer.appendChild(createSongCard(song));\n        });\n        function convertLanguageCodes(langCode) {\n            let langNames = new Intl.DisplayNames([\n                \"en\"\n            ], {\n                type: \"language\"\n            });\n            return langCode.map((code)=>langNames.of(code)).join(\", \"); // turn to string and combine\n        }\n        function formatTime(length) {\n            return `${Math.floor(length / 60)}:${length % 60 < 10 ? \"0\" + length % 60 : length % 60} `;\n        }\n        // assignment 5: add cards\n        function createSongCard(song) {\n            // Create a <div> to hold the card\n            const card = document.createElement(\"div\");\n            // Add the .card class to the <div>\n            card.classList.add(\"card\");\n            // Create a song image, use the .card-image class\n            // Also, the img should be a link\n            const songLink = document.createElement(\"a\");\n            songLink.href = song.link;\n            songLink.target = \"_blank\";\n            const songImg = document.createElement(\"img\");\n            songImg.src = song.imageUrl;\n            songImg.alt = `Image: ${song.title}`;\n            songImg.classList.add(\"card-image\");\n            songLink.appendChild(songImg);\n            card.appendChild(songLink);\n            // Song Title\n            const title = document.createElement(\"h3\");\n            title.classList.add(\"card-title\");\n            title.textContent = song.title;\n            card.appendChild(title);\n            // === Footer wrapper ===\n            const footer = document.createElement(\"div\");\n            footer.classList.add(\"card-footer\");\n            // --- Left side (year + language) ---\n            const footerLeft = document.createElement(\"div\");\n            footerLeft.classList.add(\"card-footer-left\");\n            const time = document.createElement(\"time\");\n            time.textContent = song.year;\n            const lang = document.createElement(\"span\");\n            lang.classList.add(\"lang\");\n            lang.textContent = convertLanguageCodes(song.lang); // song.lang is an array\n            footerLeft.appendChild(time);\n            footerLeft.appendChild(lang);\n            // --- Right side (duration) ---\n            const footerRight = document.createElement(\"div\");\n            footerRight.classList.add(\"card-footer-right\");\n            const duration = document.createElement(\"span\");\n            duration.classList.add(\"duration\");\n            duration.textContent = formatTime(song.length);\n            footerRight.appendChild(duration);\n            // combine left and right to footer\n            footer.appendChild(footerLeft);\n            footer.appendChild(footerRight);\n            // put it to card\n            card.appendChild(footer);\n            // Return the card\n            return card;\n        }\n    }\n};\n\n//# sourceMappingURL=assignment-6.35b2dfed.js.map\n","/**\n * WEB222 – Assignment 06\n *\n * I declare that this assignment is my own work in accordance with\n * Seneca Academic Policy. No part of this assignment has been\n * copied manually or electronically from any other source\n * (including web sites) or distributed to other students.\n *\n * Please update the following with your information:\n *\n *      Name:       Anderson Yu-Hong Cai\n *      Student ID: 109262246\n *      Date:       2025/4/2\n */\n\n// All of our data is available on the global `window` object.\n// Create local variables to work with it in this file.\nconst { artists, songs } = window; // Destructuring Assignment\n\n// For debugging, display all of our data in the console. You can remove this later.\nconsole.log({ artists, songs }, \"App Data\"); // leave here to check it can work correctly\n\nwindow.onload = function () {\n  if (!artists) {\n    console.error(\"No artists found!\");\n    return;\n  }\n\n  const menu = document.querySelector(\"#menu\");\n  const selectedArtist = document.querySelector(\"#selected-artist\");\n  const cardContainer = document.querySelector(\"#card-container\");\n\n  artists.forEach((artist) => {\n    const button = document.createElement(\"button\");\n    let textNode = document.createTextNode(artist.name);\n    button.appendChild(textNode);\n    button.addEventListener(\"click\", () => showArtistInfo(artist));\n    menu.appendChild(button);\n  });\n\n  showArtistInfo(artists[0]); // default to the first one\n\n  // choose artist and show their details\n  function showArtistInfo(artist) {\n    // console.log(artist);\n\n    let artistInfoHTML = artist.name + \"(\";\n    let linkInfoHTML = artist.links\n      .map((link) => {\n        return `<a href=${link.url} target=\"_blank\">${link.displayName}</a>`;\n      })\n      .join(\", \"); // map to return a list and join to combine them\n    artistInfoHTML += linkInfoHTML + \")\";\n\n    selectedArtist.innerHTML = artistInfoHTML;\n\n    // clean card container\n    cardContainer.innerHTML = \"\";\n\n    let filteredSongs = songs.filter(\n      (song) => song.artistId === artist.artistId && !song.explicit,\n    );\n\n    if (filteredSongs.length === 0) {\n      cardContainer.innerHTML = `<p>No available songs</p>`;\n      return;\n    }\n\n    filteredSongs.forEach((song) => {\n      cardContainer.appendChild(createSongCard(song));\n    });\n\n    function convertLanguageCodes(langCode) {\n      let langNames = new Intl.DisplayNames([\"en\"], { type: \"language\" });\n      return langCode.map((code) => langNames.of(code)).join(\", \"); // turn to string and combine\n    }\n\n    function formatTime(length) {\n      return `${Math.floor(length / 60)}:${length % 60 < 10 ? \"0\" + (length % 60) : length % 60} `;\n    }\n\n    // assignment 5: add cards\n    function createSongCard(song) {\n      // Create a <div> to hold the card\n      const card = document.createElement(\"div\");\n      // Add the .card class to the <div>\n      card.classList.add(\"card\");\n\n      // Create a song image, use the .card-image class\n      // Also, the img should be a link\n      const songLink = document.createElement(\"a\");\n      songLink.href = song.link;\n      songLink.target = \"_blank\";\n\n      const songImg = document.createElement(\"img\");\n      songImg.src = song.imageUrl;\n      songImg.alt = `Image: ${song.title}`;\n      songImg.classList.add(\"card-image\");\n      songLink.appendChild(songImg);\n\n      card.appendChild(songLink);\n\n      // Song Title\n      const title = document.createElement(\"h3\");\n      title.classList.add(\"card-title\");\n      title.textContent = song.title;\n      card.appendChild(title);\n\n      // === Footer wrapper ===\n      const footer = document.createElement(\"div\");\n      footer.classList.add(\"card-footer\");\n\n      // --- Left side (year + language) ---\n      const footerLeft = document.createElement(\"div\");\n      footerLeft.classList.add(\"card-footer-left\");\n\n      const time = document.createElement(\"time\");\n      time.textContent = song.year;\n\n      const lang = document.createElement(\"span\");\n      lang.classList.add(\"lang\");\n      lang.textContent = convertLanguageCodes(song.lang); // song.lang is an array\n\n      footerLeft.appendChild(time);\n      footerLeft.appendChild(lang);\n\n      // --- Right side (duration) ---\n      const footerRight = document.createElement(\"div\");\n      footerRight.classList.add(\"card-footer-right\");\n\n      const duration = document.createElement(\"span\");\n      duration.classList.add(\"duration\");\n      duration.textContent = formatTime(song.length);\n\n      footerRight.appendChild(duration);\n\n      // combine left and right to footer\n      footer.appendChild(footerLeft);\n      footer.appendChild(footerRight);\n\n      // put it to card\n      card.appendChild(footer);\n\n      // Return the card\n      return card;\n    }\n  }\n};\n"],"names":["artists","songs","window","console","log","onload","error","menu","document","querySelector","selectedArtist","cardContainer","showArtistInfo","artist","artistInfoHTML","name","innerHTML","linkInfoHTML","links","map","link","url","displayName","join","filteredSongs","filter","song","artistId","explicit","length","forEach","appendChild","createSongCard","langCode","langNames","card","createElement","classList","add","songLink","href","target","songImg","src","imageUrl","alt","title","textContent","footer","footerLeft","time","year","lang","Intl","DisplayNames","type","code","of","footerRight","duration","Math","floor","button","textNode","createTextNode","addEventListener"],"version":3,"file":"assignment-6.35b2dfed.js.map"}